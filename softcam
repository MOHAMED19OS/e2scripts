#!/bin/bash




# HISTORY OF CHANGES:
#
# 2018/07/16 - created shell-script:  /etc/init.d/softcam
# 2019/06/15 - remake the logging concept (logging output via function)
#            - some cosmetic improvements
# 2019/06/23 - some changes in start/stop/restart functions
# 2020/02/19 - improved and complete instructions how-to install the Softcam
# 2020/08/30 - no longer use the SIGTERM (No.15) signal, but only SIGKILL (No.9), as some OSCam builds ignore the regular stop by the SIGTERM (No.15) signal
#            - removed 'stdout' redirection to 'null' device at softcam execution/starting command-line
# 2020/11/10 - improved installation instructions (OSCam / CCcam)
# 2021/03/24 - simplified (abbreviated) script source code
# 2021/04/07 - updated return error codes for "argument status" as well as for "exit status"




# #######################  HOW-TO  #########################
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#      OpenATV 6.x  &  OpenPLi 7.x  (or similar Enigma) :
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# 1)   Download the "softcam" script file directly from my github profile + add the file extension ".oscam" + set the execution rights/attributes:
#         wget -O /etc/init.d/softcam.oscam --no-check-certificate https://github.com/s3n0/e2scripts/raw/master/softcam && chmod a+x /etc/init.d/softcam.oscam
#
#      If you plan to modify and use this script for CCcam, then the correct file extension is ".cccam" or ".CCcam":
#         wget -O /etc/init.d/softcam.CCcam --no-check-certificate https://github.com/s3n0/e2scripts/raw/master/softcam && chmod a+x /etc/init.d/softcam.CCcam
#
# 2)   For the OSCam, copy your configuration files into the "/etc/tuxbox/config/oscam" folder (using the FTP connection)
#      For the CCcam, copy your configuration files into the "/etc" folder, where the main configuration file is "/etc/CCcam.cfg"
#
# 4)   Download a specific softcam binary file and upload it to the set-top box - usually to the "/usr/bin" folder.
#      Set its executable attributes: 
#         chmod a+x /usr/bin/softcam-name
#      You can also use the following online shell script to download the OSCam binary file (I recommend it only for OpenATV):
#         wget -q -O - --no-check-certificate "https://github.com/s3n0/e2scripts/raw/master/oscam-new-version-updater.sh" | bash
#
# 4)   Restart the set-top box via the GUI-MENU or via the Shell (applies to older OpenATV / OpenPLi Enigmas):
#         reboot
#
# 5)   Select and activate the particular softcam via the GUI-MENU:
#         MENU -> Info Panel -> Softcam Panel -> select your softcam (OSCam or CCcam) by pressing the left/right buttons and then activate it with the green button
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#      All other or unknown Enigma distributions :
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# 1)   Download the "softcam" script file directly from my github profile + set the execution rights/attributes:
#         wget -O /etc/init.d/softcam --no-check-certificate https://github.com/s3n0/e2scripts/raw/master/softcam && chmod a+x /etc/init.d/softcam
#
# 2)   Probably, the "/etc/init.d/softcam" script auto-start feature is not implemented in your Enigma2 GUI (in Python algorithm),
#      so you must additionally create a symbolic link, and thus you have two options to choose from:
#
#   A) You can use the automated system tool:
#      For add (install) the startup sym-links to all default run-levels:
#         update-rc.d softcam defaults 90
#      For remove (uninstall) startup sym-links from all run-levels use the following command:
#         update-rc.d -f softcam remove
#
#   B) If the automated system tool does not work or is not installed, use the manual creation of a symbolic link:
#      For add (install) the startup sym-links to run-level No.3 (Enigma2 default run-level):
#         ln -sf /etc/init.d/softcam /etc/rc3.d/S90softcam
#      For remove (uninstall) the symbolic link you can simply delete this link:
#         rm -f /etc/rc3.d/S90softcam
#
# 3)   For the OSCam, copy your configuration files into the "/etc/tuxbox/config/oscam" folder (using the FTP connection)
#      For the CCcam, copy your configuration files into the "/etc" folder - where the main configuration file is "/etc/CCcam.cfg"
#
# 4)   Download a specific softcam binary file and upload it to the set-top box - usually to the "/usr/bin" folder.
#      Set its executable attributes: 
#         chmod a+x /usr/bin/softcam-name
#      You can also use the following online shell script to download the OSCam binary file (I recommend it only for OpenATV):
#         wget -q -O - --no-check-certificate "https://github.com/s3n0/e2scripts/raw/master/oscam-new-version-updater.sh" | bash
#
# 5)   Then restart the set-top box via the GUI-MENU or via the Shell:
#         reboot
#
# ##########################################################




# ######################  USER SETUP  ######################
#
# SOFTCAM BINARY DIRECTORY:
BINDIR="/usr/bin"
#
# SOFTCAM PROCESS NAME (BINARY FILE NAME):
BINFILENAME="oscam"                             # for CCcam:   BINFILENAME="CCcam"
#
# SOFTCAM ARGUMENTS:
ARGS="-b -r 2"                                  # for CCcam:   ARGS="-stl"
#
# SOFTCAM COMMAND TO EXECUTE IT:
CMDEXEC="${BINDIR}/${BINFILENAME} ${ARGS}"      # for CCcam:   CMDEXEC="${BINDIR}/${BINFILENAME} ${ARGS} > /dev/null 2>&1 &"
#
# LOG FILE FOR THE SOFTCAM HANDLING:
LOGFILE="/tmp/${BINFILENAME}_handling.log"
LOGSIZE=45000                                   # limit maximum file size [Bytes]
#
# CHANNEL (SERVICE REFERENCE CODE) FOR AUTOUPDATE OF PREPAID TV-PACKAGES (ENTITLEMENTS):
AUCHANNEL="1:0:19:3731:C8E:3:EB0000:0:0:0:"
#
# AUXILIARY VARIABLES:
HRLINE="--------------------------------------------------------------------------"
SCRIPTARGS="$(cat ${0} | grep -wE '[[:space:]]+[a-z\|\-]+)' | tr -d ')')"
MANPAGE="PROPER USE OF THE SCRIPT:
    ${0} <ARGUMENT>
POSSIBLE ARGUMENTS:
${SCRIPTARGS}"
#
# ###############  END OF THE USER SETUP  ##################




# #####################  FUNCTIONS  ########################

fLog()
{
    if [ "$1" = "$HRLINE" ]; then
        MSG="$1"
    else
        MSG=`date '+%Y-%m-%d %H:%M:%S'`" $1"    # add a timestamp if it's not a separator line (header line)
    fi
    
    #echo "$MSG" > /dev/null                     ### null device   <---  log will disabled (do nothing)
    #echo "$MSG" >> $LOGFILE                     ### file
    #echo "$MSG" >> $LOGFILE 2>&1                ### file + stderr
    #echo "$MSG" | tee -a $LOGFILE               ### file + stdout(display)
    echo "$MSG" 2>&1 | tee -a $LOGFILE          ### file + stdout(display) + stderr
    
    #### reduction the log filesize, if neccessary (delete first 50 lines):
    if [ -f "$LOGFILE" ] && [ $(wc -c <"$LOGFILE") -gt $LOGSIZE ]; then sed -i -e 1,50d "$LOGFILE"; fi
}

fStop()
{
    fLog "Stopping '$1'..."
    if ! pidof $1 > /dev/null; then
        fLog "...no '$1' process is running."
        fLog "$HRLINE"
        exit 7      # 1=generic or unspecified error (current practice) ; 2=invalid or excess argument(s) ; 3=unimplemented feature (for example, "reload") ; 4=user had insufficient privilege ; 5=program is not installed ; 6=program is not configured ; 7=program is not running
    else
        fLog "...sending the SIGKILL signal to the service '$1' / PID '$(pidof $1)'"
        killall -9 $1 > /dev/null
        sleep 0.5s       # changed from 1s to 0.5s, as the '/lib/python/Screens/SoftcamSetup.py' (OpenATV github) restarts the softcam script too quickly with the 'stop' argument and 1 sec. later it immediately starts the script again with the argument 'start' i.e. without using the 'restart' argument ! unfortunately my softcam script is testing as the first normal softcam stopping, which can take about 0.3 - 0.7 secs
        if pidof $1 > /dev/null; then
            fLog "...'$1' was not killed by the SIGKILL signal. The process is still running. Probably a system error ?!"
            fLog "$HRLINE"
            exit 1
        else
            fLog "...'$1' was successfully killed."
        fi
    fi
}

fStart()
{
    fLog "Starting '$1'..."
    if pidof $1 > /dev/null; then
        fLog "...'$1' process has already started and is still running."
    else
        fLog "...command-line used to start the process:   ${CMDEXEC}"
        $CMDEXEC
        sleep 0.8s
        if pidof $1 > /dev/null; then
            fLog "...'$1' was successfully started."
        else
            fLog "ERROR! '$1' start failed!"
            exit 1
        fi
    fi
}

fRestart()
{
    if pidof $1 > /dev/null; then fStop $1; fi              # the process will be stopped / killed only if it's running
    fStart $1
}

fGetVer()
{
    case `echo "$BINFILENAME" | tr '[:upper:]' '[:lower:]'` in              #  `echo "$BINFILENAME" | awk '{print tolower($0)}'`
        "oscam"*) VER=$($BINDIR/$BINFILENAME -V | grep 'Version\|IPv6' | sed 's/Version:[ ]*//' | sed 's/IPv6.*yes/with IPv6/g' | sed 's/IPv6.*no/IPv4-only/g' | sed ':a;N;$!ba;s/\n/ /g') ;;
        "cccam"*) VER=$(strings $BINDIR/$BINFILENAME | grep -E 'CCcam[[:space:]][0-9/./-]+') ;;             # it is not completely regular to get the CCcam version, but it works :)
               *) VER="ERROR! version/info detection for '${BINFILENAME}' has not yet been implemented in the script algorithm" ;;
    esac
    [ -z "$VER" ] && VER="ERROR! failed to get version/info of softcam '${BINFILENAME}'"
    echo "$VER"
}

E2inStandby()
{
    wget -q -O - http://127.0.0.1/api/powerstate | grep -qi 'instandby.*true'       # check if Enigma2 is in standby mode
}


# ##########################################################
# ##########################################################
# ##########################################################


# CHECKING THE EXISTENCE OF THE BINARY/EXEC FILE

if [ ! -x "$BINDIR/$BINFILENAME" ]; then
    fLog "ERROR! Executable binary file '$BINDIR/$BINFILENAME' does not exist!"
    fLog "$HRLINE"
    exit 5          # 1=generic or unspecified error (current practice) ; 2=invalid or excess argument(s) ; 3=unimplemented feature (for example, "reload") ; 4=user had insufficient privilege ; 5=program is not installed ; 6=program is not configured ; 7=program is not running
fi


# CALL FUNCTIONS ACCORDING TO INPUT ARGUMENTS OF THE SHELL SCRIPT **************************

case "$1" in
    start)
        fStart "$BINFILENAME"
        fLog "$HRLINE"
        ;;
    stop)
        fStop "$BINFILENAME"
        fLog "$HRLINE"
        ;;
    restart|reload|force-reload)
        fRestart "$BINFILENAME"
        fLog "$HRLINE"
        ;;
    status)
        echo -n "$BINFILENAME "
        if pidof $BINFILENAME > /dev/null
           then echo "running"; exit 0     # 0 = program is running -or- service is OK ;  1 = program is dead and /var/run pid file exists ;  2 = program is dead and /var/lock lock file exists ;
           else echo "stopped"; exit 3     # 3 = program is not running ;  4 = program or service status is unknown ;  5-99 = reserved for future LSB use ;  100-254 = reserved
        fi
        ;;
    version|info)
        fGetVer
        ;;
    au|autoupdate)
        if E2inStandby; then
            wget -qO- "http://127.0.0.1/api/zap?sRef=${AUCHANNEL}" > /dev/null 2>&1
            fLog "Zap the channel ${AUCHANNEL}"
            MSG=`date '+%Y-%m-%d %H:%M:%S'`" Zap the channel 0"
            CMD="sleep 20; /usr/bin/wget -qO- 'http://127.0.0.1/api/zap?sRef=0' > /dev/null 2>&1; echo ${MSG} >> ${LOGFILE};"
            eval "${CMD}" &>/dev/null & disown;
        fi
        ;;
    *)
        fLog "Unknown or missing arguments !"
        echo "$MANPAGE" >$(tty)
        fLog "$HRLINE"
        exit 2      # 1=generic or unspecified error (current practice) ; 2=invalid or excess argument(s) ; 3=unimplemented feature (for example, "reload") ; 4=user had insufficient privilege ; 5=program is not installed ; 6=program is not configured ; 7=program is not running
        ;;
esac


exit 0

