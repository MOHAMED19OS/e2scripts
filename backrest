#!/bin/sh

#############################
# Backup & Restore bash-script
# by s3n0, 2019-10-03
#############################
# simple bash script for backing up and restoring
# user-defined settings, files or folders in Enigma2
#############################

BACKUP_DIR="/media/hdd/backup_folder"

ARCHIVE_FILENAME="backup-enigma"     # Note: The timestamp is automatically added at the end of the file name and the file extension is ".tar.gz"

LIST="
/etc/enigma2/

/etc/tuxbox/*.xml
/etc/auto.network
/etc/cron/crontabs/root

/usr/script/

/usr/bin/oscam
/etc/init.d/softcam
/etc/rc?.d/*softcam
/etc/tuxbox/config/oscam/

/usr/bin/udpxy
/etc/init.d/udpxy
/etc/rc?.d/*udpxy

/usr/lib/enigma2/python/Plugins/Extensions/EpgDownloadReplace/
/usr/lib/enigma2/python/Plugins/Extensions/ChocholousekPicons/
/usr/lib/enigma2/python/Plugins/Extensions/Remoover/
/usr/lib/enigma2/python/Plugins/Extensions/YouTube/

/usr/share/enigma2/MetrixHD/skinparts/infobar-mod_by_s3n0/

/usr/share/enigma2/picon/
"

#############################
#############################

LIST=$(echo $LIST | tr "\n" " ")







init_4_with_feedback() {
    echo "Stopping the Enigma..."
    init 4
    x=0
    #while [ "$x" -le 15 ] && [ $(ps -o stat -C enigma2 | grep -v 'STAT') ] ; do
    while [ "$x" -le 15 ] && [ $(pidof enigma2) ] ; do
        #echo "...$x seconds waiting / Enigma state = "`ps -o stat -C enigma2 | grep -v 'STAT'`      # debugging output - for testing purpose only
        x=$(( $x + 1 ))
        sleep 1
    done
    if pidof enigma2 > /dev/null 2>&1 ; then
        echo "...stopping failed ! The Backup & Restore script will aborted."
        exit 1
    else
        echo "...successfully stopped after $x seconds."
    fi
}

do_backup() {
    echo "-----------------------"
    if [ "$1" != "quickly" ]; then         # ignoring the init command to start or stop the Enigma2, if the user choice was '--backup-quickly' argument
        # store the Standby power state when the script starts:  5 = to turn the Enigma2 into Standby ,  4 = to wake-up the Enigma2 from Standby
        [ "$(wget -q -O - http://127.0.0.1/web/powerstate | grep '</e2instandby>' | cut -f 1)" == "true" ] && previous_standby_state=5 || previous_standby_state=4
        init_4_with_feedback
        echo "-----------------------"
    fi
    echo "The archive file:"
    echo "    $BACKUP_DIR/$ARCHIVE_FILENAME-`date '+%Y-%m-%d-%H%M%S'`.tar.gz"
    echo "Files and folders to compress:"
    echo "    $LIST "
    echo "-----------------------"
    echo "Starting compression..."
    mkdir -p $BACKUP_DIR
    tar --ignore-failed-read --exclude='/etc/enigma2/epg.dat' -czpf $BACKUP_DIR/$ARCHIVE_FILENAME-`date '+%Y-%m-%d-%H%M%S'`.tar.gz $LIST
    echo "...done."
    echo "-----------------------"
    echo "Contents of the backup directory:"
    ls -l $BACKUP_DIR/$ARCHIVE_FILENAME*
    echo "-----------------------"
    if [ "$1" != "quickly" ]; then         # ignoring the init command to start or stop the Enigma2, if the user choice was '--backup-quickly' argument
        init 3
        echo "Starting the Enigma..."
        echo "...waiting 90 seconds for Enigma to start completely"
        sleep 90
        echo "...force the Enigma power to its original state: $([ $previous_standby_state == 5 ] && echo 'turn into Standby' || echo 'wake-up from Standby')"
        wget -q -O - http://127.0.0.1/web/powerstate?newstate=$previous_standby_state > /dev/null 2>&1
        echo "...done."
        echo "-----------------------"
    fi
}

do_restore() {
    echo "-----------------------"
    if [ -f $BACKUP_DIR/$ARCHIVE_FILENAME*.tar.gz ]; then
        LATEST_FILE=$(ls -tc $BACKUP_DIR/$ARCHIVE_FILENAME*.tar.gz | head -n 1)
        init_4_with_feedback
        echo "-----------------------"
        echo "The latest archive file found in the directory:"
        echo "    $LATEST_FILE "
        echo "-----------------------"
        echo "Starting decompression..."
        tar --overwrite -xzphf $LATEST_FILE
        echo "...done."
        echo "-----------------------"
        echo "Restarting the set-top box..."
        echo "(sending the 'init 6' command)"
        init 6
        echo "...done."
        echo "-----------------------"
    else
        echo "ERROR! No archive files $ARCHIVE_FILENAME*.tar.gz found in the $BACKUP_DIR directory!"
        echo "-----------------------"
        exit 1
    fi
}







case "$1" in
    b|backup|-b|--backup)
        do_backup "normal"
        ;;
    bq|backup-quickly|-bq|--backup-quickly)
        do_backup "quickly"
        ;;
    r|restore|-r|--restore)
        do_restore
        ;; 
    *)
        echo -e "\nUSAGE:"
        echo -e "\t $0 <ARGUMENT>"
        echo -e "ARGUMENT:"
        echo -e "\t b|backup|-b|--backup \n\t\t ...to backup all user-defined files & folders"
        echo -e "\t bq|backup-quickly|-bq|--backup-quickly \n\t\t ...to backup all user-defined files & folders without stopping the Enigma during the backup process"
        echo -e "\t r|restore|-r|--restore \n\t\t ...to restore all user-defined files & folders"
        ;;
esac





exit 0
